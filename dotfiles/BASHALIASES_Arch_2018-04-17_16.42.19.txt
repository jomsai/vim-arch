##===================My Aliases================##
#==============File .bashrc Intro===============#
#====My PS1 from Kirsle Online PS1 generator====#
#PS1="\[$(tput bold)\]\[$(tput setaf 5)\]\t\[$(tput setaf 2)\][\[$(tput setaf 4)\] \u \[$(tput setaf 1)\]]==> \[$(tput setaf 3)\]\h \[$(tput setaf 6)\] \W ]\[$(tput bold)\]\[$(tput setaf 2)\][ $?! ]\[$(tput setaf 4)\][[>\[$(tput setaf 1)\]\\$ \[$(tput sgr0)\]"

PS1="\[$(tput bold)\]\[$(tput setaf 5)\]\t\[$(tput setaf 2)\][\[$(tput setaf 6)\] \u@\[$(tput setaf 3)\]\h \[$(tput setaf 6)\] \W ]\[$(tput bold)\]\[$(tput setaf 2)\][ $?! ]\[$(tput setaf 4)\][[>\[$(tput setaf 1)\]\\$ \[$(tput sgr0)\]"
##===============Apt Package Manager===========##
alias pacfind='sudo pacman -Ss'                                                                                         
alias pacin='sudo pacman -Syu' 
alias pacpkg='sudo pacman -U'  #ARG1=package for Arch something.pkg.tar.xz
alias pacls='pacman -Q > ~/Documents/PACMAN_Arch_Installed_List.txt'
alias pacrm='sudo pacman --remove'
alias pacrm2='sudo pacman --remove --recursive'
alias packeyring='sudo pacman --remove --recursive archlinux-keyring && sudo pacman install archlinux-keyring'
alias packeyring3='sudo pacman-key --init; pacman-key --populate archlinux'  # Must be run as root so no sudo

##============Edit the Dotfiles================##
alias ebrc='vim $HOME/.bash_aliases'
alias evrc='vim $HOME/.vimrc'
alias etmux='vim $HOME/.tmux.conf'
#alias so='source $HOME/.bash_profile && \cp $HOME/.bash_aliases $HOME/.bash_aliases.bak && \cp $HOME/.bash_aliases $HOME/Documents/BASHALIASES_Arch_$(date "+%Y-%m-%d_%H.%M.%S").txt && echo "Yep Dotfile Saved!!!!"'
alias so='source ~/.bash_profile && \cp $HOME/.bash_aliases $HOME/.bash_aliases.bak && \cp $HOME/.bash_aliases $HOME/github/vim-arch/dotfiles/BASHALIASES_Arch_$(date "+%Y-%m-%d_%H.%M.%S").txt && echo Copied'
function so2() {
	\cp $HOME/.bash_aliases $HOME/.bash_aliases.bak &&
	\cp $HOME/.bash_aliases $HOME/github/vim-arch/dotfiles/BASHALIASES_Arch_$(date "+%Y-%m-%d_%H.%M.%S").txt &&
	echo Copied Boss;
}

alias sotmux='\cp $HOME/.tmux.conf $HOME/.tmux.conf.bak && \cp $HOME/.tmux.conf $HOME/github/vim-arch/TMUXCONF_Arch_$(date "+%Y-%m-%d_%H.%M.%S").txt && echo "TMUX Awesome!"'
alias tmuxv='tmux split-window -h -p 40'
alias tmuxh='tmux split-window -v -l 30'
alias tmuxhh='tmux split-window -h -p 50'
alias sovim='\cp $HOME/.vimrc $HOME/.vimrc.bak && \cp $HOME/.vimrc $HOME/github/vim-arch/VIMRC_Arch_$(date "+%Y-%m-%d_%H.%M.%S").txt && echo "VIMRC Saved!"'
##=======Set LS as primary for L* commands======##
alias ls='ls -hailcF --color=auto'
alias lf='\ls -F --color=auto' # Marks DIR executables & symlinks
alias ll='ls -lv --group-directories-first'
alias lss='ls | less'  # ls+less
alias ln='ls -n'  # UID PID instead of names
alias lA='\ls -lhFA --color=auto'  #Alphabetical sort
alias lAr='\ls -lhFra --color=auto'  #reverse Alphabetical sort
alias lsize='ls -S'   #Sort by file size
alias lm='\ls -t | head -n 1' # Shows last modified filename
alias lmod='\ls -tlc --color=auto'  # Sort by Mod Time, New 1st
alias lmodr='\ls -tlcr --color=auto' # Sort by Modification Time New Last
alias lswc='ls | wc -l'  # This ls has how many lines?
alias ld='ls -d */'   # only Dirs
alias ldr='\ls -lhiFr --color=auto' #DIR only reverse Alphabet
alias l.='ls -dAFh .[^.]*'  # ls only Dotfiles
alias lst='ls -hFtal | grep $(date +%Y-%m-%d)' #ls Today
alias lu='ls -l /dev/disk/by-uuid'
alias lz='ls -Z'  #SELinux Security Context ls
alias v='vdir -ih --color'
#======================cd======================##
cd() { builtin cd "$@" && ls; }   # cd then ls DIR
#alias -- ="cd -" ## Return to previous DIR
alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias ......='cd ../../../../../'
##=================Fixes for Sudo===============##
# I prefer command | xargs sudo
# alias ll | sed "s/.*'\(.*\)'.*/\1/g" | xargs sudo
alias sudo='sudo '
alias sbb='sudo $(fc -ln -1)'  # sudo !! shortcut
alias sutop='sudo /bin/su -' #Ubuntu way to root prompt
alias sushi='sudo bash'
##======Environemental Variables================##
alias env='printenv'
alias env2='export -p'
alias path='echo -e ${PATH//:/\\n}'  # executable Paths
alias bashv='/bin/bash --version | grep bash | cut -d "," -f2 | cut -c 10-50'
alias shoptvar='shopt -p' # ShowALL & u=OFF, s=ON status
alias shopton='shopt -s'    # Show all s=ON
alias shoptoff='shopt -u'   # Show all u=OFF
#=Bash Options=shopt -s=set -u=unset options===##
# -p=ListALLOptions -q=EXIT0 if set 1 if not===##
#= -o=List all SET env Options that are set on=##
#shopt -s cdspell  #small spell autocorrects
set -o vi
shopt -s cdable_vars  # cd ls assumes DIR where ls is
shopt -s checkhash   # ls (does exist? yes ok do it)
#shopt -s checkwinsize   #update winsize if needed
#shopt -s sourcepath  #Already Default enabled
shopt -s no_empty_cmd_completion
shopt -s extglob   # Needed for programmable completion
#histappend --try to list long commands on 1 line
# Disable options: # No shell warn incoming mail
shopt -u mailwarn
unset MAILCHECK
#====history related shopt options
shopt -s cmdhist #Saves all of a long cmd in history
shopt -s histappend histreedit histverify
#PROMPT_COMMAND='history -a'
##=================Networking===================##
alias pi='echo $(echo "scale=70; 4*a(1)" | bc -l)'
alias ping3='ping -c3 -s1 8.8.8.8'
alias fastping='ping -c 100 -s.2'
#alias nface="ip -s link | grep 2: | cut -d ' ' -f2" #Linux
#alias nface2="ip addr | grep 'state UP' | gawk '{print $2}' | sed -e 's/://'"
alias nface="ip addr | grep 'state UP' | cut -d ' ' -f2 | sed -e 's/://'"
alias nfaceinfo='sudo lshw -C network'
alias ethinfo='sudo ethtool enp2s0'
#alias intip='ifconfig | head -n 2 | grep inet | cut -c 14-24'
alias intip="ip addr | grep global | cut -d '/' -f1 | cut -c 10-22"
alias extip="curl icanhazip.com"
alias extip2="dig +short myip.opendns.com @resolver1.opendns.com"
alias extip3='curl ifconfig.io'
alias extip4='wget http://ipinfo.io/ip -qO -'
alias ipgeo='curl ipinfo.io' #Needs ARG1=IP else does local extip
alias gateway='sudo route -n'
alias macnew='sudo macchanger -r enp0s3'
alias net='sudo arp -a && echo ${SEP} && sudo ip addr && echo ${SEP} && sudo ip route && echo ${SEP} && sudo ip neigh && echo ${SEP} && sudo ip maddr'
alias netreload='sudo systemctl stop NetworkManager && sleep 5 && sudo systemctl start NetworkManager && sleep 3 && sudo systemctl status NetworkManager'
alias nettop='sudo iftop -pPl'
alias netstatd='sudo dstat -f' #See man dstat for all the single options instead of FULL -f here
alias kernel='hostnamectl | grep Kernel | cut -d ":" -f2 | cut -c 2-35'
alias kernelno='uname -r'
alias lanports='sudo nmap -T4 -A -F -v 172.21.63.0/24 >> $HOME/Documents/LANPORTSCAN.txt'
alias os='hostnamectl | grep System | cut -d ":" -f2 | cut -c 2-28'
alias routes='netstat -r' # Or route
alias tcp='netstat -anp tcp'
alias udp='netstat -anp udp'
alias ports="sudo lsof -i | grep LISTEN && netstat -an | grep LISTEN"  #ports: listen connections x2
alias listen='netstat -anp tcp | grep LISTEN'  # listen: All listen connections
alias sock='lsof -i'  #All open TCP/IP Sockets
alias loop='netstat -anp tcp | grep 127.0.0.1'  # Loopback interface tcp stats
alias tdump='sudo tcpdump -i 1 -c4000 -ttt -w ~/tmp/tcpdump4k.pcap-ng'
#alias toron='/home/fdx/.git/tor-browser_en-US/start-tor-browser.desktop'
alias toron='~/Downloads/tor-browser_en-US/start-tor-browser.desktop'
alias tordns='tor-resolve'  #ARG=Domain resolves to IP
alias torchroot='chroot --userspec=tor:tor /opt/torchroot /usr/bin/tor'
alias torupdate='sudo tor-browser -u'
uuid() { nmcli c | grep ethernet | awk '{print $4}' ; } # Works if interface has 3 words eg wired connection 1

alias cdmounts='cd /media/$USER/'
alias mount='mount |column -t'

alias sshreload='sudo systemctl stop sshd && sudo systemctl start sshd && sudo systemctl status sshd && echo "SSH Reloaded"' 
alias sshstatus='sudo systemctl status sshd' 
alias sshgit='ssh -Tv git@github.com' 
alias sshdepend='sudo systemctl list-dependencies sshd' 
alias sshlskeys='ssh-add -l'  # Either no ID or shows active fingerprint 
alias sshadd25519='ssh-add ~/.ssh/id_ed25519_mozilla_2018-04-04' #Need passphrase ready & adds key ID to the keychain 
alias sshaddrsa='ssh-add ~/.ssh/id_rsa_mozilla_2018-04-04' 
alias sshenv='ssh-agent -s' # Show ENV VAR for the key 
alias sshstartrsa='eval `ssh-agent` && ssh-add -t 1800 ~/.ssh/id_rsa_mozilla_2018-04-04 && ssh-add -l && ssh-agent -s && echo "ssh agent on so go"' 
alias sshstart25519='eval `ssh-agent` && ssh-add -t 1800 ~/.ssh/id_ed25519_mozilla_2018-04-04 && ssh-add -l && ssh-agent -s && echo "ssh agent on so go"' 
alias sshdeleteremotekey='ssh-keygen -R'  #Needs 1 ARG for remote IP 
alias sshsha='sudo ssh-keygen -lv -E sha256 -f ~/.ssh/id_ed25519_mozilla_2018-04-04.pub && sudo ssh-keygen -lv -E sha256 -f ~/.ssh/id_rsa_mozilla_2018-04-04.pub'
alias sshmd5='sudo ssh-keygen -lv -E md5 -f ~/.ssh/id_ed25519_mozilla_2018-04-04.pub && sudo ssh-keygen -lv -E md5 -f ~/.ssh/id_rsa_mozilla_2018-04-04.pub'
alias sshdebug='sudo /usr/bin/sshd -d'
alias sshalgos='sudo ssh -Q cipher && sudo ssh -Q cipher-auth && sudo ssh -Q mac && sudo ssh -Q kex && sudo ssh -Q key'
alias sshvit='ssh -p 22 -i id_vit_key.pem root@vit.tklapp.com'
##===================Processes==================##
alias psg='ps aux | grep -v grep | grep -i -e VSZ -e' #Needs 1 ARG to grep for
alias psl='ps -aux | less'

#===================System Services==============#
alias reboot='sudo systemctl reboot' #All users get a warning
alias poweroff='sudo systemctl poweroff' #All users get a warning
alias halt='sudo systemctl halt' #All users get a warning
alias sysctla='sudo systemctl list-units --all --state=active'
alias sysctli='sudo systemctl list-units --all --state=inactive'
alias sysctlall='sudo systemctl list-unit-files --all'
alias sysctlstatus='sudo systemctl status'
alias sysctlreload='sudo systemctl reload'
alias sysctlrestart='sudo systemctl restart'
alias sysctlnetwork='sudo systemctl restart NetworkManager'
alias sysctlon='sudo systemctl start'
alias sysctloff='sudo systemctl stop'
alias sysctlenable='sudo systemctl enable'

##===================TCP Wrappers===============##
# PROBLEM: 1 Just lists libwrap files not effected service so need prior lines
alias tcpallowssh='sudo echo "sshd  :   192.168.1 192.168.64." >> /etc/hosts.allow'
alias tcpdenyall='sudo echo "ALL   :   ALL" >> /etc/hosts.deny'
#alias tcpservices='ldd $(which {/usr/bin/*,/usr/sbin/*}) | grep libwrap'
alias tcpservices2='ldd /{,usr/}{bin,sbin}/* | grep -B 50 libwrap | grep '^/''
#alias tcpdaemon='ldd $(which sshd) | grep libwrap' #Requires a file path eg /usr/sbin/sshd
alias tcpstatus='sudo tcpdmatch sshd' #Requires a IP or domain ARG
alias tcpconfig='sudo tcpdchk -v'
alias tcplog='cat /var/log/auth.log | grep -i ip'
##========Firewall Iptables or UFW==============##
alias iptls='echo $SEP $bldcyn IP4Rules $rst && sudo iptables -vL && echo $SEP $bldcyn IP6Rules $rst && sudo ip6tables -vL'
alias iptls2='echo IP4Rules && sudo iptables -nL --line-numbers && echo $SEP && echo IP6Rules && sudo ip6tables -nL --line-numbers'
alias iptlsin='sudo iptables -L INPUT -n -v --line-numbers'
alias iptlsout='sudo iptables -L OUTPUT -n -v --line-numbers'
alias iptlsfw='sudo iptables -L FORWARD -n -v --line-numbers'
alias iptmyrules='sudo iptables -S'

alias iptflush='sudo iptables -t nat -F && sudo iptables -t mangle -F && sudo iptables -F && sudo iptables -X && echo "Flushed!"'
alias iptdropall='sudo iptables -P INPUT DROP && sudo iptables -P FORWARD DROP && sudo iptables -P OUTPUT DROP && echo "All Chains Dropped"'
alias ipt6flush='sudo ip6tables -t nat -F && sudo ip6tables -t mangle -F && sudo ip6tables -F && sudo ip6tables -X && echo "Flushed!"'
alias ipt6dropall='sudo ip6tables -P INPUT DROP && sudo ip6tables -P FORWARD DROP && sudo ip6tables -P OUTPUT DROP && echo "IPv6-dropped!"'

alias iptlo='sudo iptables -A INPUT -i lo -j ACCEPT'
alias iptestablishedin='sudo iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT'
alias iptestablishedout='sudo iptables -A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT'
alias iptdnseth0='sudo iptables -A OUTPUT -o eth0 -p udp -m udp --dport 53 -j ACCEPT'
alias ipthttpeth0='sudo iptables -A OUTPUT -o eth0 -p tcp -m tcp --dport 80 -m state --state NEW -j ACCEPT'
alias ipthttpseth0='sudo iptables -A OUTPUT -o eth0 -p tcp -m tcp --dport 443 -m state --state NEW -j ACCEPT'
alias iptsshineth0='sudo iptables -A INPUT -i eth0 -p tcp -s 192.168.1.0/24 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT'
alias iptsshouteth0='sudo iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT'
alias iptrmoutrule='sudo iptables -D OUTPUT' #Needs #ARG for OUTPUT rule to remove
alias iptrminrule='sudo iptables -D INPUT' #Needs #ARG for INPUT rule to remove
alias iptlimitssh='sudo iptables -A INPUT -p tcp --syn --dport 22 -m connlimit --connlimit-above 3 -j REJECT'
alias iptdropinvalid='sudo iptables -A INPUT -m conntrack --ctstate INVALID -j DROP'
alias iptlogon1='sudo iptables -N LOGGING && sudo iptables -A INPUT -j LOGGING'
alias iptlogon2='sudo iptables -A LOGGING -m limit --limit 2/min -j LOG --log-prefix "IPTables Packet Dropped: " --log-level 7'
alias iptlogon3='sudo iptables -A LOGGING -j DROP'
#=====Debian8 Rule to make the rules persistent
alias iptpersist='sudo apt-get install iptables iptables-persistent && sudo dpkg-reconfigure iptables-persistent && echo "PersistON!"'
#=====Reload the current ruleset instead of a reboot
alias iptpersistreload='sudo systemctl restart netfilter-persistent.service && sudo systemctl status netfilter-persistent.service'
##================Fail2ban Aliases=============##
alias f2bsshlog='sudo cat /var/log/auth.log | grep "Failed password"'
alias f2bblocks='sudo iptables -L -n'
alias f2bjail='sudo fail2ban-client status'
alias f2bunbanip='sudo fail2ban-client set sshd unbanip' # needs 1 IP ARG
alias f2blog='sudo tail -n 40 /var/log/fail2ban.log'
alias f2blog2='sudo tail -n 40 /var/log/secure'
alias f2bstatus='sudo systemctl status fail2ban'
alias f2bstatus2='sudo fail2ban-client status'
##====================AppArmor=================##
alias armor1='sudo apt-get install apparmor apparmor-utils apparmor-easyprof apparmor-profiles apparmor-notify auditd'
alias armor2='sudo perl -pi -e 's,GRUB_CMDLINE_LINUX="(.*)"$,GRUB_CMDLINE_LINUX="$1 apparmor=1 security=apparmor",' /etc/default/grub'
alias armor3='sudo update-grub && sudo reboot'
alias armorstatus='sudo aa-status'
alias armormodule='sudo cat /sys/module/apparmor/parameters/enabled'  # Y=Yes N=No & ya got a problem!
alias armorconfined='ps auxZ | grep -v '\''^unconfined'\'''
alias armorstart='sudo /etc/init.d/apparmor start'
alias armorclear='sudo /etc/init.d/apparmor start apparmor ACTION=clear' # clear policy cache
alias armorunload='sudo /etc/init.d/apparmor start apparmor ACTION=teardown' # unload all policy
alias armorreload='sudo /etc/init.d/apparmor start apparmor ACTION=reload' # unload all policy
alias armorforcereload='sudo /etc/init.d/apparmor start apparmor ACTION=force-reload'  # same as 'reload'
alias armorenforce='sudo aa-enforce' #ARG=/path/to/app
alias armorenforceall='sudo aa-enforce /etc/apparmor.d/*'
alias armorcomplainadd='sudo aa-complain'  #ARG=/path/to/app
alias armorcomplainall='sudo aa-complain /etc/apparmor.d/*'
# 2 commnds to reload aa and unloading reloading the kernel
alias armorkernelstop='sudo /etc/init.d/apparmor stop && sudo update-rc.d -f apparmor remove'
alias armorkernelstart='sudo /etc/init.d/apparmor start && sudo update-rc.d apparmor defaults'
alias armorlog2='sudo aa-logprof' #Interactive session
alias armorlog='sudo cat /var/log/auth.log | grep armor'
alias armorutil='sudo aa-logprof' #Reads logs & queries whether to allow or not
alias armorgenprof='sudo aa-genprof'  # ARG1=Some APP to Generate Profile for
alias armorunconfined='sudo aa-unconfined --paranoid && sudo aa-unconfined'
##===================SELINUX===================##
alias seapp='sealert -b'  #Brings up the setroubleshooter app
alias selogs='sudo sealert -a /var/log/audit/audit.log'  #GUI tool parses the logfile
alias sesvc='sudo semanage port -l | grep'  #ARG=service
alias sestatus='sudo sestatus && sudo semanage user -l && sudo sealert -a /var/log/audit/audit.log'
##==================PAM Aliases=================##
alias pamapps='ldd /{,usr/}{bin,sbin}/* | grep -B 5 libpam | grep '^/''
#alias pamstatus="ldd $(which $1) | grep libpam"  #Requires 1 APP ARG
alias pammodules='ls /lib/*/security'
alias pamlog='sudo cat /var/log/auth.log | grep pam'
alias pamuserblocks='sudo pam_tally2 -u' #Query blocks of a -u=user
alias pamunblockuser='sudo pam_tally2 -r -u' # -r=reset -u=user
##=======Trojans Rootkits Viruses===============##
alias rkupdate='sudo rkhunter --update'
alias rkversion='sudo rkhunter --version && sudo rkhunter --versioncheck'
alias rkdb='sudo rkhunter --propupd'
alias rkchk='sudo rkhunter -c --enable all --disable none'
alias rkchkrwo='sudo rkhunter -c --enable all --disable none --rwo'
alias rkvalid='sudo rkhunter -C' # Check if setup OK after making /etc/rkhunter.conf changes
alias rkcron='sudo rkhunter --cronjob > /tmp/RKHUNTERLOG.txt' #No color, no keypresses, to a file
alias rklog='sudo cat /var/log/rkhunter.log'
alias rklogexport='sudo cat /var/log/rkhunter/rkhunter.log > ~/Desktop/RKHUNTERLOG.txt'
alias rktests='sudo rkhunter --list rootkits && sudo rkhunter --list tests'
alias rkcheck2='sudo chkrootkit -e'
alias unhideall='sudo unhide -m -d sys procall brute reverse'
alias debsumschk='sudo debsums -a'
alias debsumsreinstall='sudo apt-get install --reinstall $(dpkg -S $(debsums -c) | cut -d : -f 1 | sort -u)'
alias debsumsfail='sudo debsums -a | grep FAILED && sudo debsums -a | grep REPLACED'
alias clamscan='sudo clamscan'
alias clamdb='sudo freshclam'
alias clamhelp='clamscan --help'
alias clamdb2='sudo killall freshclam && sudo freshclam' #if clamdb error svc used by other svc then do this
alias clamdocuments='sudo clamscan -r --bell -i $HOME/Documents -l /var/log/clamscan.log'
alias clamdownloads='sudo clamscan -r --bell -i $HOME/Downloads -l /var/log/clamscan.log'
alias clamroot='sudo clamscan -ri / -l /var/log/clamscan.log'
alias clamroot2='sudo clamscan -ri / | grep FOUND >> $HOME/Documents/CLAMROOT_Report.txt'
alias clamhome='sudo clamscan -r --bell -i $HOME -l /var/log/clamscan.log'
alias clamhome2='sudo clamscan -r --bell -i $HOME | grep FOUND >> $HOME/Documents/CLAMHOME_Report.txt'
alias clammozilla='sudo clamscan -r --bell -i $HOME/.cache/mozilla/firefox/*.default/cache2/entries | grep FOUND >> $HOME/Documents/CLAMHOME_Report.txt'
alias clamlog='sudo cat /var/log/clamscan.log > $HOME/Documents/ClamLOG.txt'
alias clamfound='sudo cat /var/log/clamscan.log | grep -i found'
alias clamlogdb='tail -n60 /var/log/clamav/freshclam.log'
alias clamlogscan='sudo tail -n60 /var/log/clamscan.log'
alias clamall='sudo clamscan -r --bell -i / | grep FOUND >> $HOME/Documents/CLAM_ALL.txt'
alias clampid='ps aux | grep clamd && ps aux | grep fresh'
alias clamps='ps ax | grep [c]lamd'
alias clamreport='sudo clamscan -r /home | grep FOUND >> ~/Documents/CLAM_Report.txt'
alias clamversion='clamdscan -V'
alias clamtest='sudo clamscan ~/eicar.com.txt'
#=============VM Management grep virt=============#
alias virtls='sudo virsh list --all' #List all Qemu OSes installed
alias virtls2='sudo virsh --connect qemu:///system list --all'
alias virtgui='sudo virt-manager &' #Start virt-manager GUI App from CLI
alias virtubcd='qemu-system-x86_64 -cdrom ~/iso/ubcd538.iso'
#====cpu#==64bit=or=32==Intel=vmx=AMD=svm=etc====#
alias cpuinfo='cat /proc/cpuinfo | grep "model name" | uniq | cut -d ":" -f2 | cut -c 2-50'
alias cpus='grep processor /proc/cpuinfo'
alias cpuspecs='head /proc/cpuinfo'
alias cpuvmspecs='egrep "(vmx|svm)" --color /proc/cpuinfo | uniq | grep vmx' #Intel uses vmx & AMD uses svm but either OK
alias cpuvmspecs2='sudo lscpu | grep vmx'  ## vmx is Intel Vtd flag. For AMD it is svm
alias cpuram='free -t'
alias cpuswap='free -t'
alias cpuflags="egrep -wo 'vmx|ept|vpid|npt|tpr_shadow|flexpriority|vnmi|lm|aes' /proc/cpuinfo  | sort | uniq"
alias cpuall='sudo lscpu'
alias cpubits='grep -w -o lm /proc/cpuinfo | uniq'  ## lm=64bit cpu
alias cpubasic="egrep -wo 'vmx|lm|aes' /proc/cpuinfo  | sort | uniq | sed -e 's/aes/Hardware encryption=Yes (&)/g' -e 's/lm/64 bit cpu=Yes (&)/g' -e 's/vmx/Intel hardware virtualization=Yes (&)/g'"
#================Misc Aliases====================#
#==============Some safer Options================#
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'
alias cp='cp -i'
alias mv='mv -iZ'  #Interactive & set correct context for new DIR
alias ln='ln -i'
alias rm='rm -I --preserve-root' #Interactive > 3 files & nada under /
alias shred7='sudo shred -fzv -n7 "$@"'

alias c='/usr/bin/clear'
alias diff='colordiff'
alias du='du -ach'
alias du2='ncdu'
alias df='df -Tha'
alias df2='pydf'
alias dfhome='sudo df -ha $HOME; pydf'
alias dfhere='sudo df -ha ./'

alias aliasg='alias | grep'
alias bc='bc -l'
alias cacert='curl --remote-name --time-cond cacert.pem https://curl.haxx.se/ca/cacert.pem'
alias chrome='/opt/google/chrome/chrome &'
alias cx='chmod a+x' #ARG1 = *.txt etc.
alias desktop='echo $DESKTOP_SESSION'  ## Works if it has been exported to ENV and it was auto on Manjaro
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias fhere="find . -name "
alias fs='sudo fsarchiver probe -v'
alias h='history'
alias histg="history | grep"
alias header='curl -I'
alias headerc='curl -I --compress'
alias j='jobs'
alias jstop="for x in `jobs -p` ; do kill -9 $x ; done"   # kill -9 $(jobs -p)" # See https://serverfault.com/questions/240155/how-can-i-kill-all-stopped-jobs
alias less='less -R --tabs=4' # colorful 'less', tab stops = 4
alias logwatch='logwatch --detail 10 >> $HOME/Documents/logwatch.txt'
alias mkdir='mkdir -p -v'
function mkdircd () { mkdir -p "$@" && eval cd "\"\$$#\""; }
alias mount='mount |column -t'
alias now='date +"%T"'
alias now='date +"%T"'
alias nowtime=now
alias nowdate='date +"%d-%m-%Y"'
alias pi='echo $(echo "scale=60; 4*a(1)" | bc -l)' #Need to download bc 1st
alias pwage='sudo chage --list' #Needs a user ARG
alias python3='/usr/bin/python3.5'

alias randpw="openssl rand -base64 44" #15 CHAR PW so remove the last CHAR
alias randpw2="</dev/urandom tr -dc '12345!@#_$-%qwertQWERTasdfgASDFGzxcvbZXCVB' | head -c44; echo "" "
alias shaall='rhash -aiv --bsd --percents --speed'
alias sharhashls='rhash --list-hashes'  # LIST of All hashes rhash can do
alias shacrc='rhash -C'  # CRC32 hash
alias sha3='rhash --sha3-512'
alias sha1='openssl dgst -sha1'
alias sha256='openssl dgst -sha256'
alias sha512='openssl dgst -sha512'
alias shamd5='openssl dgst -md5'
alias sharmd='openssl dgst -rmd160'
alias shatiger='rhash --tiger'
alias shawp='openssl dgst -whirlpool'
alias termsize='echo "Rows=$(tput lines) Cols=$(tput cols)"'
alias timecheck='echo "Current TZ is ==> ${reverse}$(sudo cat /etc/timezone)${rst}" && sudo dpkg-reconfigure --frontend noninteractive tzdata'
alias timezoneset='echo "Asia/Bangkok" | sudo tee /etc/timezone'
alias timeset='sudo tlsdate -wv' #Download tlsdate. -v=verbose, -w=HTTPS option
alias timentpstatus='timedatectl'
function uid0() { awk -F: '($3 == "0") {print}' /etc/passwd; }
alias vi=vim
alias edit="$EDITOR"  # if not set then use vim in quotes

alias wdir='watch -p -n 10 "ls $@"' #Needs DIR ARG and use in 2 tmux splits
alias wget="wget -c"  #won't quit with poor connection
#alias yt="youtube-dl -f mp4"
function yt() { youtube-dl -f mp4 $@ ; }
function rminode () { find . -inum $@ -exec rm {} \; ; }
##=Archival & Packaging & see zipf extract fxs=##
alias mktar='tar -cvf'
alias mkbz2='tar -cvjf'
alias mkgz='tar -czvf'
##=====================Aide IDS=================##
alias aidehelp='sudo aide -h'
alias aideversion='sudo aide -v'
alias aideinit='sudo aide -i'
alias aidecheck='sudo aide -C' # -C=--check the sys (aide defaults to check)
alias aideupdate='sudo aide -u' # -u=--update (rebuilds db after changes made)
alias aidecfgok='sudo aide -D' # -D=--config-check
alias aidecompare='sudo aide --compare' #2DBs
alias aideverbose='sudo aide -V128 -C' # More verbose check level default=20[range0-255]
alias aidelog='sudo tail -n 80 /var/log/aide/aide.log'
#==================Github Aliases================#
alias ga='git add -A'                       #ga:    Git add all files
alias gb='git branch'
alias gc='git commit -m'                    #gc:    Git commit w/ message
alias gcl='git clone'
alias gco='git checkout'
alias gcob='git checkout -b'
alias gd="git diff --color"					#gd:	Git diff in color
alias gitdelete='git add -u . && git commit -m "removing deleted files from tracking" && git push origin master'
alias gf='git fetch'
alias gk='gitk --all&'
alias glog='git log'
alias gp='git push origin master'           #gp:    Git push
alias gpu='git pull'                        #gpu:   Git pull
alias gr='git revert HEAD'                  #gr:    Git revert HEAD
alias gs='git status'                       #gs:    Git status
alias gittar='sudo tar cjvf ~/Desktop/opt_training_github.tbz /opt/training ~/github'
alias gx='gitx --all'

alias gitls='git config --list'  ## Shows all the .gitconfig options

# Git aliases from https://gist.github.com/ald890/9089169
#alias g="git"
#alias g:rollback="git reset --hard HEAD~1"
#alias gb="git reset --soft HEAD~1"

# https://github.com/git/git/blob/master/contrib/completion/git-completion.bash
#source ~/git-completion.bash   # need the file from URL above in ~
##=================Docker=======================##
alias docimg='sudo systemctl status docker && echo "$(tput setaf 3)##=====Docker Status and Current Docker Images=====##$(tput sgr0)" && sudo docker images'
alias dockali='sudo docker run -i -t b0d9d7dfbd0a /bin/bash'
alias dubrun='sudo docker run -i -t 601d2041b02b /bin/bash'
alias dub2onbg='sudo docker start 601d2041b02b' #Start container in background
alias dub2onfg='sudo docker attach 601d2041b02b' #Reattach fg container terminal
alias dub1onbg='sudo docker start 7486dd6571d1'
alias dub1onfg='sudo docker attach 7486dd6571d1'
alias docimgsha='sudo docker inspect --format='{{.RepoDigests}}' $IMAGE'  #Show sha256sum for  current image

##==================nginx======================##
alias nginxhome='http://localhost:80'
alias nginxedit='sudo vim /etc/nginx/nginx.conf'
alias nginxconf='sudo vim /etc/nginx/nginx.conf'
alias nginxrestart='sudo service nginx restart'
alias nginxreload='sudo /usr/local/nginx/sbin/nginx -s reload'
alias nginxtest='sudo /usr/local/nginx/sbin/nginx -t'
##===========Some Kali Aliases==================##
## run as root the 7 commands below
## See docs.kali.org/downloading/kali-linux-live-usb-persistence
## 1st need correct usb e.g. sdc by # fdisk -l and this will make
## 2 partitions 1 and 2 & so the new persistence will be /dev/sdb3
## a VAR end=7gb  #do this before 2nd Alias
alias kalipersist='read start _ < <(du -bcm kali-linux-mate-2017.1-amd64.iso | tail -1); echo $start parted /dev/sdb mkpart primary $start $end'
alias kalipersist2='mkfs.ext3 -L persistence /dev/sdb3'
alias kalipersist3='e2label /dev/sdb3 persistence'
alias kalipersist4='mkdir -p /mnt/my_usb'
alias kalipersist5='mount /dev/sdb3 /mnt/my_usb'
alias kalipersist6='echo "/ union" > /mnt/my_usb/persistence.conf'
alias kalipersist7='umount /dev/sdb3'
##===============CLI Bash Math==================#
calc () {
    bc -l <<< "$@"
}

divide() { echo "scale=25;$1/$2" | bc; }  ### Just do $ divide 10 2






#=============Functions & Scripts================#
# No more cd ../../../
up() {
	local d=""
	limit=$1
	for ((i=1; i<=limit; i++))
		do
			d=$d/..
		done
	d=$(echo $d | sed 's/^\///')
	if [ -z "$d" ]; then
		d=..
	fi
	cd $d
}

function histtop() {
		history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10
}

# Commands that need root
# I have an alias for this already sudo included
#if [ $UID -ne 0 ]; then
#	alias reboot='sudo reboot'
#	alias update='sudo apt-get upgrade'
#fi

zipf () { zip -r "$1".zip "$1" ; }  # zipf:Create a ZIP archive of a folder

# extract function for any Archive Compression Type
extract () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xjf $1     ;;
			*.tar.gz)    tar xzf $1     ;;
			*.bz2)       bunzip2 $1     ;;
			*.rar)       unrar e $1     ;;
			*.gz)        gunzip $1      ;;
			*.tar)       tar xf $1      ;;
			*.tbz2)      tar xjf $1     ;;
			*.tgz)       tar xzf $1     ;;
			*.zip)       unzip $1       ;;
			*.Z)         uncompress $1  ;;
			*.7z)        7z x $1        ;;
			*)     	 echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
						 echo "'$1' is not a valid file"
	fi
}

# Function to move to new DIR when created. cd - then toggles last 2 DIR
function mkdircd () { mkdir -p "$@" && eval cd "\"\$$#\""; }
# function to print nunbers down the screen as per $1 e.g. count 6
function count(){ python -c "for num in xrange($1):print num";}

# Make your directories and files access rights sane. For EVAL.
#function sanitize() { chmod -R u=rwX,g=rX,o= "$@" ;}

##=================Colors MISC==================##

# Simple Color Settings
BLACK='\e[0;30m'  #0;30=Lt,1;32=Dk
RED='\e[0;31m'  #0;31=Lt,1;31=Dk
GREEN='\e[0;32m' #0;32=Lt,1;32=Dk '\033[1;32m'
BROWN='\e[0;33m'  #0;33=Brown,1;33=Bright YELLOW
BLUE='\e[0;34m'  #0;34=Lt,1;34=Dk
PURPLE='\e[0;35m'  #0;35=Lt,1;35=Dk
CYAN='\e[0;36m'  #0;36=Lt,1;36=Dk
WHITE='\e[1;37m'  #0;37=Lt Gray but 1:37=White

# Some BOLD Color Settings
BOLDBLACK='\e[1;30m'  #0;30=Lt,1;32=Dk
BOLDRED='\e[1;31m'  #0;31=Lt,1;31=Dk
BOLDGREEN='\e[1;32m' #0;32=Lt,1;32=Dk '\033[1;32m'
BOLDYELLOW='\e[1;33m'  #0;33=Brown,1;33=Bright YELLOW
BOLDBLUE='\e[1;34m'  #0;34=Lt,1;34=Dk
BOLDPURPLE='\e[1;35m'  #0;35=Lt,1;35=Dk
BOLDCYAN='\e[1;36m'  #0;36=Lt,1;36=Dk

# Simple Color Backgrounds
BlackBG='\e[40m'
RBG='\e[41m'
GBG='\e[42m'
YBG='\e[43m'
BlueBG='\e[44m'
PBG='\e[45m'
CBG='\e[46m'
WBG='\e[47m'

# LESS man page colors (makes Man pages more readable).
export LESS_TERMCAP_mb=$'\e[01;31m'
export LESS_TERMCAP_md=$'\e[01;31m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;44;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[01;32m'

# This function echoes 8 COLORS and codes to check your display
print8colors()
{
	echo -e "\n\e[4;31mLight Colors\e[0m  \t\t\e[1;4;31mDark Colors\e[0m"
	echo -e "\e[0;30;47m Black    \e[0m 0;30m \t\e[1;30;40m Dark Gray  \e[0m 1;30m"
	echo -e "\e[0;31;47m Red      \e[0m 0;31m \t\e[1;31;40m Dark Red   \e[0m 1;31m"
	echo -e "\e[0;32;47m Green    \e[0m 0;32m \t\e[1;32;40m Dark Green \e[0m 1;32m"
	echo -e "\e[0;33;47m Brown    \e[0m 0;33m \t\e[1;33;40m Yellow     \e[0m 1;33m"
	echo -e "\e[0;34;47m Blue     \e[0m 0;34m \t\e[1;34;40m Dark Blue  \e[0m 1;34m"
	echo -e "\e[0;35;47m Magenta  \e[0m 0;35m \t\e[1;35;40m DarkMagenta\e[0m 1;35m"
	echo -e "\e[0;36;47m Cyan     \e[0m 0;36m \t\e[1;36;40m Dark Cyan  \e[0m 1;36m"
	echo -e "\e[0;37;47m LightGray\e[0m 0;37m \t\e[1;37;40m White      \e[0m 1;37m"
}

# 16 million COLOR Test Function that works
print16millcolors() { fb=3;r=255;g=1;b=1;printf '\e[0;%s8;2;%s;%s;%sm▒▒▒ ' "$fb" "$r" "$g" "$b" ; }
# OK 16 Million COLORS also but does not work
print16millcolors2() { for r in {200..255..5}; do fb=4;g=1;b=1;printf '\e[0;%s8;2;%s;%s;%sm    ' "$fb" "$r" "$g" "$b"; done ; }

# Mixed Colors -BOLD element1 Easy to  REV FGBG change 1 to 7
WhiteGrayBG='\e[1;47;88m'
GreenBrownBG='\e[1;100;92m'
BlackYellowBG='\e[1;103;30m' 
CyanGrayBG='\e[1;107;36m'
BlackGreenBG='\e[1;102;30m'
YellowMaroonBG='\e[1;88;226m'  # Yellow Text MaroonBG 256 Colors
NC="\e[0m"  # NO COLOR RESET back to Default
BLINK='\e[5;32;47m'  #Blinking GreenFG on GrayBG

# tput SETAF Text 8 color variables
txtund=$(tput sgr 0 1)  # Underline
txtbld=$(tput bold)   # Bold
bldred=${txtbld}$(tput setaf 1) #  red
bldgrn=${txtbld}$(tput setaf 2) #  green
bldyel=${txtbld}$(tput setaf 3) #  yellow
bldblu=${txtbld}$(tput setaf 4) #  blue
bldmag=${txtbld}$(tput setaf 5) #  magenta
bldcyn=${txtbld}$(tput setaf 6) #  cyan
bldwht=${txtbld}$(tput setaf 7) #  white
reverse=${txtbld}$(tput rev)    # reverse FGBG
rst=$(tput sgr0)             # Reset
info=${bldwht}*${txtrst}        # Feedback
pass=${bldblu}*${txtrst}
warn=${bldred}*${txtrst}
ques=${bldblu}?${txtrst}

print8fgcolors() { printf '\e[%sm▒' {30..37} 0; echo ; }
print8bgcolors() { printf '\e[%sm ' {40..47} 0; echo ; }

# 16 COLOR Function --NOTE can crash terminator
print16colors() {
for clbg in {40..47} {100..107} 49 ; do
	#Foreground
	for clfg in {30..37} {90..97} 39 ; do
		#Formatting
		for attr in 0 1 2 4 5 7 ; do
			#Print the result
			echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
		done
		echo #Newline
	done
done
exit 0
}

#Samples function for 256 COLOR formatting
print256colors() { printf '\e[48;5;%dm ' {0..255}; printf '\e[0m \n' ; }
# 256 COLOR function2 with for loop and tput
print256colors2()
{
	color()
	{ 
			for c; do
						printf '\e[48;5;%dm%03d' $c $c
								done
										printf '\e[0m \n'
	}
	IFS=$' \t\n'
	color {0..15}
	for ((i=0;i<6;i++)); do
			color $(seq $((i*36+16)) $((i*36+51)))
			done
			color {232..255}
}

SEP="${bldyel}##===========/\===========##${rst}"
##===============Message Center=================##
#== echo -e for ESC, \033 works > \e on MacOS====#
#== quoting () work but also generate error
#echo -e "ALERT *\\*/ ${PURPLE}${WBG}MOTD${NC}"  #Message in Purple on Yellow
#echo -e "${CYAN}${WBG}BASH Version $(which bash --version) - for $USER${NC}"
#echo -e "MOTD \e[107;38;5;199m Fuhgettaboutit \e[33;48;5;52m Semper fi $NC"
#echo -e "$GreenBrownBG Conf in 10 minutes NOT MANDATORY... Free Cookies! $NC"
#echo -e "${BlackYellowBG} Welcome to a new day! ${NC}"
#echo -e "${bldgrn}Green tput ${bldmag}MOTD${rst}"
#echo "$bldgrn Help me I am out of Oreos! $rst"
#echo "${bldmag} PARTY at the Boss House 7PM! ${rst}"
#echo "${reverse} Reverse Current FGBG Text MOTD${rst}"
#printf '\e[38;5;222;48;5;238m  Hi  \e[0m\n'
# Server will SHUTDOWN Message function using tput 6 or CYAN
gohome()
{
		tput setaf 6; echo "The Server will SHUTDOWN in 15 minutes so SAVE and go home"
}

### Eval of Fx to check PDFs with VirusTotal ###
transfercheck() {
    if [ $# -eq 0 ];
      then echo -e "No arguments specified. Usage:\n transfercheck /tmp/test.md\ncat /tmp/test.md | transfercheck test.md";
      return 1;
  fi  
  # write to output to tmpfile for progress bar 
  tmpfile=$( mktemp -t transferXXX)
  if tty -s; 
    then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g');
    curl -X PUT --progress-bar --upload-file $1 https://transfer.sh/$basefile/virustotal >> $tmpfile;
  else curl -X PUT --progress-bar --upload-file "-" "https://transfer.sh/$1/virustotal" >> $tmpfile ;
  fi  
  
  cat $tmpfile;
  rm -f $tmpfile;
}
alias transfercheck=transfercheck

source ~/git-completion.bash

##============END Message Center================##
##============To Remember or Works in Progress==##
# alias X then unalias X to set unset aliases
#colors below=>osxdaily.com/2012/02/21/add-color-to-the-terminal-in-mac-os-x/
# Backup a file with date eg cp file file.$(date "+%b_%d_%Y_%H.%M.%S")
##============END My PERSONAL SETTINGS==========##
